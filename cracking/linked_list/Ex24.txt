Partition: Write code to partition a linked list around a value x, such that all nodes less than x come before all nodes greater than or equal to x. If x is contained within the list, the values of x only need to be after the elements less than x (see below). The partition element x can appear anywhere in the "right partition"; it does not need to appear between the left and right partitions.

Example
Input  3 - 5 - 8 - 5 - 10 - 2 - 1, partition 5
Output 3 - 1 - 2 - 10 - 5 - 5 - 8

8, partition 5
4, partition 5

Solution 1
Create two new heads one for list of elements less than x, another for equal or greater. Create pointers for both new lists. Iterate through the given list and add elements to new pointers. At the end point pointer1 next link to head of second list. And assign pointer2 next link to null. Return the head of first list. Runtime is O(N)

Implementation

class Ex24 {
  static class Node {
    int value;
    Node next;
    Node (int value, Node next) {
      this.value = value;
      this.next = next;
    }
  }
  
  static Node partition(Node node, int partition) {
    Node fakeHead1 = Node(0, null);
    Node fakeHead2 = Node(0, null);
    var pointer1 = fakeHead1;
    var pointer2 = fakeHead2;
    while (node != null) {
      if (node.value < partition) {
        pointer1.next = node;
        pointer1 = node;
      } else {
        pointer2.next = node;
        pointer2 = node;
      }
      node = node.next;
    }
    pointer1.next = fakeHead2.next;
    pointer2.next = null;
    return fakeHead1.next;
  }
  
}
